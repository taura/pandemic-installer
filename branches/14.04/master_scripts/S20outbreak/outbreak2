#!/bin/bash

this_dir=$(dirname $(realpath $0))

test_mode=0

if [ ${test_mode} = 0 ] ; then
    # honban. /dev/sda -> /dev/sda
    src_file=/dev/sdb
    dst_file=/dev/sda
    client_prefix=10.0.3.
    client_last_octet_begin=100
    client_last_octet_end=199
    blk_sz=$((10 * 2**20)) # 100MB at a time
    rsh_method=ssh
else
    # test mode:
    # $(pwd)/test_src_file -> /tmp/tau/{0,1,2,...}/test_dst_file
    # bring up 3 local processes
    # transfer 10 bytes at a time
    src_file=$(pwd)/test_src_file
    dst_file=test_dst_file
    clients="x 3"
    blk_sz=$((10))
    rsh_method=sh
fi

wallpaper_dir=.

never_quit_above=${never_quit_above:-100}

# get_file_size FILE prints the size of FILE
get_file_size() {
    if [ -e $1 ]; then
	python -c "import os,sys; print os.lseek(os.open(sys.argv[1], os.O_RDONLY), 0, os.SEEK_END)" $1
    else
	echo "error: file \"$1\" does not exist." 1>&2 
	return 1
    fi
}

get_pingable_clients() {
    make -s -f ping.mk -j address_prefix=${client_prefix} last_octet_begin=${client_last_octet_begin} last_octet_end=${client_last_octed_end}
}

bring_up_clients() {
    if [ "${clients}" = "" ]; then
	clients=$(get_pingable_clients)
    fi
    echo "outbreak: clients: ${clients}"
    gxpc use ${rsh_method} $(hostname) .
    gxpc explore --children_soft_limit 200 ${clients}
    gxpc e mkdir -p "/tmp/tau/\${GXP_EXEC_IDX}"
    gxpc cd "/tmp/tau/\${GXP_EXEC_IDX}"
}

# check if we should continue despite that
# some clients have failed
check_continue() {
    nm=$1			# number of masters (0 or 1)
    nc=$2			# number of clients still alive
    n_clients=$3		# the original number of clients
    sz_done=$4 			# bytes that we have copied
    sz_total=$5			# bytes we need to copy in total
    never_quit_above=$6		# if the number of clients is this much,
                                # we alywas contine
    echo "outbreak: ${nm} master, ${nc}/${n_clients} clients, ${sz_done}/${sz_total} ($((${sz_done} * 100 / ${sz_total}))%) done"

    # if the master has gone, no way to proceed
    if [ ${nm} -lt 1 ]; then
	echo "outbreak: master failed. bail out." 1>&2
	return 1
    fi

    if [ ${nc} -ge ${never_quit_above} ]; then
	return 0
    fi

    # otherwise, we determine if we continue or not,
    # by the progress we have made and the number of
    # clients alive. the intuition is that, (a) if some
    # clients have died pretty early, we don't lose
    # too much by restarting it from scratch, possibly
    # after replacing failed clients with new ones.
    # (b) if we have made much progress (say 50%), then
    # we should be more patient.  to sum up (a) and (b),
    # we continue if :
    #  live clients      bytes we have copied 
    # ---------------- + ---------------------- > 0.9
    #  total clients        bytes in total
    #
    if [ $((${sz_done} * ${n_clients} + ${nc} * ${sz_total})) -le $((${sz_total} * ${n_clients} * 9 / 10)) ] ; then
	echo "outbreak: too few clients left. bail out." 1>&2
	return 1
    fi

    return 0			# OK, go ahead
}

copy_wallpapers() {
    master=$1
    gxpc mw bcp ${this_dir}/change_wallpaper ${wallpaper_dir}
    gxpc mw bcp ${this_dir}/start.png        ${wallpaper_dir}
    gxpc mw bcp ${this_dir}/success.png      ${wallpaper_dir}
    gxpc mw bcp ${this_dir}/failure.png      ${wallpaper_dir}
    gxpc e  chmod +x ${wallpaper_dir}/change_wallpaper
}

copy_block() {
    src_file=$1
    dst_file=$2
    a=$3			# from offset
    b=$4			# to offset
    master=$5			# master name (ugly)
    wallpaper_dir=$6		# wallpaper dir (ugly)

    max_retries=4		# we try (max_retries + 1) times
    for i in $(seq 0 ${max_retries}); do
	if [ $i -gt 0 ] ; then
	    echo "outbreak: retry with reachable processes ($i/${max_retries})."
	fi
	n_reachables=$(gxpc --timeout 3.0 ping | wc -l)
	gxpc smask
	n_succeeded=$(gxpc --timeout 10.0 mw --master blkcpm "blkcpc --min_receivers 0 --creat --range ${a}:${b} ${src_file} ${dst_file}" | grep OK | wc -l)
	if [ ${n_reachables} = ${n_succeeded}  ]; then
	    # echo "great, no processes failed. move on."
	    break
	else 
	    if [ $((${n_reachables} - ${n_succeeded})) = 1 ]; then
		# exactly one process failed. we let it out.
		# otherwise, more than one processes failed,
		# and it may be a cascaded failure due to network 
		# disconnect. retry
		echo "outbreak: one process failed. drop it out."
		gxpc smask
	    else
		echo "outbreak: $((${n_reachables} - ${n_succeeded})) processes failed."
	    fi
	fi
    done
    # the set mask here has no effect if we terminate the loop
    # with the first or the second clause; 
    gxpc smask
}


main() {
    # get the size of the source file/disk
    sz=$(get_file_size ${src_file})
    if [ "${sz}" = "" ]; then return 1; fi
    echo "outbreak: copy ${src_file} -> ${dst_file}, size = ${sz}."
    # clean up daemons
    gxpc quit
    # bring up the local daemon and get its name
    master_name=$(gxpc e echo '${GXP_GUPID}')
    echo "outbreak: master id = ${master_name}"
    # get the number of masters; it SHOULD BE one,
    # but we still check if the master has brought up
    n_masters=$(gxpc e hostname | wc -l) #  0 or 1
    # bring up clients and get the number of them
    # they also go to their working dir
    bring_up_clients
    n_clients=$(gxpc -G ${master_name} e hostname | wc -l)
    echo "outbreak: reached ${n_clients} clients"

    # copy the wallpaper changer and images to clients
    copy_wallpapers ${master_name}
    # change clients' wallpapers to the default one
    gxpc -G ${master_name} e ${wallpaper_dir}/change_wallpaper ${wallpaper_dir}/start.png

    start_time=$(date +%s)

    # a = bytes we have copied so far
    a=0
    # the number of masters that haven't failed (must be one)
    nm=${n_masters}
    # the number of clients that haven't failed
    nc=${n_clients}
    # the main copying loop
    while [ ${a} -lt ${sz} ]; do
	now=$(date +%s)
	sec_since_start=$((${now} - ${start_time}))
	echo "outbreak: $(date +%H:%M:%S) (${sec_since_start} sec since start)"
	# judge if we should continue or bail out
	if ! check_continue ${nm} ${nc} ${n_clients} ${a} ${sz} ${never_quit_above}; then
	    return 1
	fi
	# real work. copy bytes a..b of the file
	b=$((${a} + ${blk_sz}))
	# run blkcpc; if a client failed, it changes the wallpaper to failed
	copy_block ${src_file} ${dst_file} ${a} ${b} ${master_name} ${wallpaper_dir}
	# check if the master is alive
	nm=$(gxpc -g ${master_name} e hostname | wc -l)
	# check how many clients are alive
	nc=$(gxpc -G ${master_name} e hostname | wc -l)
	a=${b}
    done
    # congrat. if you have gone thus far, you succeeded
    gxpc -G ${master_name} e ${wallpaper_dir}/change_wallpaper ${wallpaper_dir}/success.png
    echo "outbreak: ${nc} clients succeeded"
}

main
